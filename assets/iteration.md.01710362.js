import{_ as s,c as n,o as a,a as e}from"./app.913deb5b.js";const F=JSON.parse('{"title":"Iteration","description":"","frontmatter":{},"headers":[{"level":2,"title":"forRange()","slug":"forrange","link":"#forrange","children":[]}],"relativePath":"iteration.md"}'),o={name:"iteration.md"},l=e(`<h1 id="iteration" tabindex="-1">Iteration <a class="header-anchor" href="#iteration" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#forrange">forRange()</a></li></ul></nav><h2 id="forrange" tabindex="-1">forRange() <a class="header-anchor" href="#forrange" aria-hidden="true">#</a></h2><p>execute a callback for each index of the range specified.</p><p>returning a <code>non-undefined</code> value will cause the loop to break.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">forRange</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">end</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">start</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">step</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ul><li><em><code>callback</code></em> : callback to be executed.</li><li><em><code>end</code></em> : ending number, non-inclusive.</li><li><em><code>start</code></em> : starting number, <code>0</code> by default.</li><li><em><code>step</code></em> : stepping number, <code>1</code> by default.</li></ul><blockquote><p><em>throws when callback is not a function.</em></p></blockquote><blockquote><p><em>throws when end or start or end argument is not a number.</em></p></blockquote>`,9),t=[l];function p(c,r,i,y,C,d){return a(),n("div",null,t)}const A=s(o,[["render",p]]);export{F as __pageData,A as default};
